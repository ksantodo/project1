}
geteloaddatadf = function()
{
data = read.xlsx("elecloaddata.xlsx")
data$DATE = formatelecDate(data$DATE);
data$TIME = formatelecTime(data$TIME);
eloaddf = data.frame(dates = as.POSIXct(strptime(paste(data$DATE, data$TIME), "%m/%d/%y %H:%M:%S"), tz = "GMT"), kwh = data$kWh, kwVAR = data$kVARh);
#NOTE: 2 dates/times become NA when converted to POSIXct
return(eloaddf)
}
eloaddf = geteloaddatadf();
#
# write a function getweatherdf() - you will assign the return value to weatherdf
# 2. Next load the weather data from NOAA into a data frame weatherdf. The data is in 1874606932872dat.txt
# This is 1 hour interval data for a specific weather station close to
# the location of the site from which electric load data was obtained
#
# you need to use fixed width parsing to read the data into a data frame.
# add a column called dates to the dataframe similar to #1 above
#
# library to read in fixed columns
library(readr)
# Converts numeric date to character date for weather data
formatweathDate = function(date)
{
c.date = paste(paste(as.integer(date/1000000) %% 100, as.integer(date/10000) %% 100, sep = "/"), as.integer(date/100000000), sep = "/");
return(c.date);
}
# Converts numeric time to character time for weather data
formatweathTime = function(time)
{
seconds = 0;
minutes = time %% 100;
hours = as.integer(time/100) %% 100;
c.time = paste(paste(hours, minutes, sep = ":"), seconds, sep = ":");
return(c.time)
}
# took some iformation from 3505doc.txt
getweatherdf = function()
{
data = read_fwf("1874606932872dat.txt", skip = 1, na = c("*", "**", "***", "****", "*****"),
fwf_widths(c(7, 6, 13, 4, 4,
4, 4, 4, 2, 2, 2, 5,
3, 3, 3, 3, 3, 3, 3, 3,
2, 5, 5, 7, 6, 7,
4, 4, 6, 6, 6, 6, 2)));
names(data) = c("USAF", "WBAN", "YR__MODAHRMN", "DIR", "SPD",
"GUS", "CLG", "SKC", "L", "M", "H", "VSB",
"MW.1", "MW.2", "MW.3", "MW.4", "AW.1", "AW.2", "AW.3", "AW.4",
"W", "TEMP", "DEWP", "SLP", "ALT", "STP",
"MAX", "MIN", "PCP01", "PCP06", "PCP24", "PCPXX", "SD");
date = formatweathDate(data$YR__MODAHRMN);
time = formatweathTime(data$YR__MODAHRMN);
data$dates = as.POSIXct(strptime(paste(date, time), "%m/%d/%Y %H:%M:%S"), tz = "GMT");
#NOTE: 2 dates/times become NA when converted to POSIXct
return(data)
}
weatherdf = getweatherdf();
# write a funcion getbillsdf() - you will assign the return value to billsdf
# 3. Next load the bill data from billdata.xlsx
# this data is monthly and carefully note the start and end date of each billing period.
# name the fields of the dataframe as
# billdate, billstartdt, billenddt, kwh, mindemandkw, actualdemandkw, custcharge,
# distchrgkw, mttkwh, tbckwh,nugckwh, sbckwh, rggieekwh, deliverykwh,
# totdeliverychrg, supplychrg, totalchrg
#
getbillsdf = function()
{
data = read.xlsx("billdata.xlsx")
names(data) = c("billdate", "billstartdt", "billenddt", "kwh", "mindemandkw", "actualdemandkw",
"custcharge", "distchrgkw", "mttkwh", "tbckwh", "nugckwh", "sbckwh", "rggieekwh",
"deliverykwh", "totdeliverychrg", "supplychrg", "totalchrg");
data$billdate = convertToDate(data$billdate, origin = "1900-01-01");
data$billstartdt = convertToDate(data$billstartdt, origin = "1900-01-01");
data$billenddt = convertToDate(data$billenddt, origin = "1900-01-01");
return(data)
}
billsdf = getbillsdf();
month.year = format(eloaddf$dates, "%Y %m");
total.kwh = aggregate(eloaddf$kwh, list(month.year), sum);
names(total.kwh) = c("Year/Month", "Total kWh");
print(total.kwh, row.names = F);
hour=cut(as.POSIXct(eloaddf$dates-1), "hour");
eloadhrdf = aggregate(eloaddf$kwh, list(hour), sum);
names(eloadhrdf) = c("dates", "kwh");
eloadhrdf$dates = as.POSIXct(strptime(eloadhrdf$dates, "%Y-%m-%d %H:%M:%S"), tz = "GMT");
library(ggplot2)
install.packages("ggplot2")
library(glm)
install.packages("glm")
install.packages("gbm")
?glm
install.packages("ISLR")
install.packages("boot")
require(MASS)
library(MASS)
library(car)
install.packages("car")
library(class)
library(leaps)
library("leaps")
install.packages("leaps")
library(glmnet)
install.packages("glmnet")
library(pls)
install.packages("pls")
library(tree)
install.packages("tree")
library(randomforest)
library(randomForest)
install.packages("randomForest")
install.packages("e1071")
install.packages("ROCR")
?prcomp
install.packages("rpart")
install.packages("nnet")
library(ggplot2)
idx.14 = which(format(eloadhrdf$dates, "%Y") == "2014")
gg14 = ggplot(data = eloadhrdf[idx.14, ], aes(x = format(dates, "%m"), y = format(dates, "%H"), fill = kwh)) + geom_tile()
gg15 = ggplot(data = eloadhrdf[-idx.14, ], aes(x = format(dates, "%m"), y = format(dates, "%H"), fill = kwh)) + geom_tile()
multiplot(gg14, gg15, cols = 2)
library(grid)
multiplot(gg14, gg15, cols = 2)
library(rmisc)
library(Rmisc)
install.packages("Rmisc")
multiplot(gg14, gg15, cols = 2)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(gg14, gg15, cols = 2)
grid.arrange(gg14, gg15, ncols = 2)
grid.arrange(gg14, gg15, ncol = 2)
gg14 = ggplot(data = eloadhrdf[idx.14, ], aes(x = format(dates, "%m"), y = format(dates, "%H"), fill = kwh)) + geom_tile() + xlab("Month") + ylab("Hour");
gg15 = ggplot(data = eloadhrdf[-idx.14, ], aes(x = format(dates, "%m"), y = format(dates, "%H"), fill = kwh)) + geom_tile() + xlab("Month") + ylab("Hour");
grid.arrange(gg14, gg15, ncol = 2)
Month = format(weatherdf$dates, "%m")
bp = ggplot(data = weatherdf, aes(x = Month, y = TEMP)) + geom_boxplot()
bp
bp = ggplot(data = weatherdf, aes(x = format(weatherdf$dates, "%m"), y = TEMP)) + geom_boxplot() + xlab("Month") + ylab("Temperature")
bp
names(weather.df)
names(weatherdf)
nrow(weatherdf)
nrow(eloadhrdf)
365*24*2
length(unique(eloadhrdf$dates))
print(total.kwh, row.names = F);
hour=cut(as.POSIXct(weatherdf$dates), "hour");
length(hour)
hour[19176]
hour[19000]
hour[19200]
hour[19100]
hour[19150]
idx.dup = which(duplicated(hour));
length(idx.dup)
19176-1657
nrow(eloadhrdf)
8 * 24 * 365
2 * 24 * 365
class(hour)
idx = which(!duplicated(hour));
length(idx)
idx = which(!duplicated(hour) & format(weatherdf$dates, "%Y") != 2016);
length(idx)
weatherdf$dates[idx[1]]
hour[idx[1]]
eloadhrdf$dates[1]
eloadhrdf$dates[2]
eloadhrdf$dates[17494]
hour[idx[17495]]
hour[idx[17494]]
hour[idx[17493]]
hour[idx[17492]]
length(which(duplicated(eloadhrdf$dates)))
hour[idx[17491]]
hour[idx[17492]]
hour = as.POSIXct(hour);
hour[1]
write.csv(hour, file = "weather.csv")
write.csv(eloadhrdf$dates, file = "elec.csv")
write.csv(as.character(eloadhrdf$dates), file = "elec.csv")
write.csv(as.character(eloadhrdf$dates), file = "elec.csv")
write.csv(as.character(hour), file = "weather.csv")
write.csv(eloadhrdf$dates, file = "elec.csv")
hour = as.POSIXct(hour, tz = "GMT");
hour[1]
write.csv(as.character(hour), file = "weather.csv")
write.csv(hour, file = "weather.csv")
class(hour)
class(eloadhrdf$dates)
weatherlong = hour
write.csv(weatherlong, file = "weather.csv")
hour[2]
hour[3]
hour=cut(as.POSIXct(weatherdf$dates), "hour");
hour
hour = as.POSIXct(hour, tz = "GMT");
hour
write.csv(hour, file = "weather.csv")
write.csv(hour[idx], file = "weather.csv")
hour=cut(as.POSIXct(eloaddf$dates-1), "hour");
hour = as.POSIXct(hour, tz = "GMT");
write.csv(hour, file = "elec2.csv")
which(is.na(eloaddf$dates))
data = read.xlsx("elecloaddata.xlsx")
data$DATE = formatelecDate(data$DATE);
data$TIME = formatelecTime(data$TIME);
test = eloaddf = data.frame(dates = as.POSIXct(strptime(paste(data$DATE, data$TIME), "%m/%d/%y %H:%M:%S"), tz = "GMT"), kwh = data$kWh, kwVAR = data$kVARh);
test = data.frame(dates = as.POSIXct(strptime(paste(data$DATE, data$TIME), "%m/%d/%y %H:%M:%S"), tz = "GMT"), kwh = data$kWh, kwVAR = data$kVARh);
test$dates[which(format(test$dates, "%Y") == "2014" & (test$dates, "%m") == "3")]
test$dates[which(format(test$dates, "%Y") == "2014" & (test$dates, "%m") == "3")]
test$dates[which(format(test$dates, "%Y") == "2014" & format(test$dates, "%m") == "3")]
test$dates[which(format(test$dates, "%Y") == 2014 & format(test$dates, "%m") == 3)]
test$dates[which(format(test$dates, "%Y") == "2014" & format(test$dates, "%m") == "3")]
test$dates[1]
test$dates[which(format(test$dates, "%Y") == "2014" & format(test$dates, "%m") == "3")]
format(test$dates, "%Y")
format(test$dates, "%Y") == 2014
format(test$dates, "%Y") == "2014"
format(test$dates, "%m")
test$dates[which(format(test$dates, "%Y") == "2014" & format(test$dates, "%m") == "03")]
idx.join = which(hour[idx] == eloadhrdf$dates)
modeldatadf = merge(data.frame(dates = eloadhrdf$dates, kwh = eloadhrdf$kwh), data.frame(dates = hours[idx], temp = weatherdf$TEMP[idx]));
hour=cut(as.POSIXct(weatherdf$dates), "hour");
hour = as.POSIXct(hour, tz = "GMT");
idx = which(!duplicated(hour) & format(weatherdf$dates, "%Y") != 2016);
modeldatadf = merge(data.frame(dates = eloadhrdf$dates, kwh = eloadhrdf$kwh), data.frame(dates = hour[idx], temp = weatherdf$TEMP[idx]));
nrow(modeldatadf)
write.csv(modeldatadf$dates, file = "model.csv")
names(modeldatadf)
modeldatadf$year = format(modeldatadf$dates, "%Y");
modeldatadf$month = format(modeldatadf$dates, "%m");
modeldatadf$hrofday = format(modeldatadf$dates, "%H");
modeldatadf = modeldatadf[c(1, 4, 5, 6, 3, 2)];
names(modeldatadf)
?glm
summary(modeldatadf$kwh)
table(modeldatadf$kwh)
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data[which(year == 2014, )])
return glm.fit;
}
model.2014 = premodel(modeldatadf);
summary(model)
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data[which(year == 2014, )])
return(glm.fit)
}
model.2014 = premodel(modeldatadf);
summary(model)
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data, subset = year == 2014)])
return(glm.fit)
}
model.2014 = premodel(modeldatadf);
summary(model)
names(modeldatadf)
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data, subset = year == 2014)])
return(glm.fit)
}
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data, subset = year == 2014));
return(glm.fit)
}
model.2014 = premodel(modeldatadf);
summary(model)
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data, subset = year == 2014));
return(glm.fit)
}
premodel = function(data)
{
glm.fit = glm(kwh ~ month + hrofday + temp, data = data, subset = year == 2014);
return(glm.fit)
}
model.2014 = premodel(modeldatadf);
summary(model)
summary(model.2014)
?gbm
library(gbm)
?gbm
library(gbm)
idx = which(modeldatadf$year == 2014);
train = modeldatadf[idx, ];
test = modeldatadf[-idx, ];
set.seed(6814);
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf, distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T);
class(modeldatadf$month)
modeldatadf$year = as.factor(format(modeldatadf$dates, "%Y"));
modeldatadf$month = as.factor(format(modeldatadf$dates, "%m"));
modeldatadf$hrofday = as.factor(format(modeldatadf$dates, "%H"));
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf, distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T);
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf[-c("year")], distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf[, -c("year")], distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
modeldatadf$year = format(modeldatadf$dates, "%Y");
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf, distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
train = modeldatadf[idx, ];
test = modeldatadf[-idx, ];
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
table(train$month)
table(test$month)
table(train$hrofday)
table(test$hrofday)
class(kwh)
class(train$kwh)
class(test$kwh)
class(train$temp)
class(test$temp)
train = modeldatadf[idx, 3:6];
test = modeldatadf[-idx, 3:6];
set.seed(6814);
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit110, method = "cv")
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.05, interaction.dept = 1, n.trees = 5000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit110, method = "cv")
gbm.fit110 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.02, interaction.dept = 1, n.trees = 3000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit110, method = "cv")
gbm.fit15 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.02, interaction.dept = 1, n.trees = 3000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit15, method = "cv")
gbm.fit35 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf, distribution = "gaussian", shrinkage = 0.05, interaction.dept = 3, n.trees = 5000, cv.folds = 5, verbose = T)
gbm.fit35 = gbm(kwh ~ month + hrofday + temp, data = modeldatadf, distribution = "gaussian", shrinkage = 0.02, interaction.dept = 3, n.trees = 3000, cv.folds = 5, verbose = T)
gbm.fit35 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.03, interaction.dept = 3, n.trees = 3000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit35, method = "cv")
gbm.fit310 = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.03, interaction.dept = 3, n.trees = 3000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit25, method = "cv")
best.iter_train = gbm.perf(gbm.fit310, method = "cv")
best.iter_train = gbm.perf(gbm.fit35, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.05, interaction.dept = 3, n.trees = 2000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.05, interaction.dept = 3, n.trees = 1000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
summary(gbm.fit)
gbm.fit$cv.error[best.iter_train]
gbm.fit$cv.error[best.iter_train+1]
gbm.fit$cv.error[best.iter_train-1]
gbm.fit$train.error[best.iter_train]
plot(x = gbm.fit, i.var = "hrofday", n.trees = best_iter_train)
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "month", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "temp", n.trees = best.iter_train)
idx = which(modeldatadf$dates > as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S"));
idx = which(modeldatadf$dates > as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
length(idx)
modeldatadf[idx[1], ]
idx = which(modeldatadf$dates >= as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
modeldatadf[idx[1], ]
pred2015df = modeldatadf[idx, ];
resultsdf = data.frame(dates = billsdf$billdate, predkwh = integer(12), actualkwh = billsdf$kwh);
idx = which(pred2015df$dates < as.POSIXct("2015-01-29 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
idx
length(idx)
predkwh = predict(gbm.fit, pred2015df, type = "response", n.trees = best.train_iter);
best.iter_train = gbm.perf(gbm.fit, method = "cv")
predkwh = predict(gbm.fit, pred2015df, type = "response", n.trees = best.iter_train);
predkwh[1]
pred2015df$kwh[1]
predkwh[2]
pred2015df$kwh[2]
resultsdf$predkwh[1] = sum(pred2015df$kwh[idx])
resultsdf[1, ]
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", interaction.dept = 3, n.trees = 3000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", interaction.dept = 3, n.trees = 10000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
summary(gbm.fit)
gbm.fit$cv.error[best.iter_train]
gbm.fit$train.error[best.iter_train]
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "month", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "temp", n.trees = best.iter_train)
idx = which(modeldatadf$dates >= as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
pred2015df = modeldatadf[idx, ];
predkwh = predict(gbm.fit, pred2015df, type = "response", n.trees = best.iter_train);
resultsdf = data.frame(dates = billsdf$billdate, predkwh = integer(12), actualkwh = billsdf$kwh);
idx = which(pred2015df$dates < as.POSIXct("2015-01-29 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
resultsdf$predkwh[1] = sum(pred2015df$kwh[idx])
resultsdf[1, ]
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.005, interaction.dept = 3, n.trees = 5000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
summary(gbm.fit)
gbm.fit$cv.error[best.iter_train]
gbm.fit$train.error[best.iter_train]
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "month", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "temp", n.trees = best.iter_train)
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.005, interaction.dept = 3, var.monotone = c(0, 0, 1), n.trees = 5000, cv.folds = 5, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
summary(gbm.fit)
gbm.fit$cv.error[best.iter_train]
gbm.fit$train.error[best.iter_train]
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "month", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "temp", n.trees = best.iter_train)
idx = which(modeldatadf$dates >= as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
pred2015df = modeldatadf[idx, ];
predkwh = predict(gbm.fit, pred2015df, type = "response", n.trees = best.iter_train);
resultsdf = data.frame(dates = billsdf$billdate, predkwh = integer(12), actualkwh = billsdf$kwh);
idx = which(pred2015df$dates < as.POSIXct("2015-01-29 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
resultsdf$predkwh[1] = sum(pred2015df$kwh[idx])
resultsdf$predkwh[1]
idx = which(pred2015df$dates >= billsdf$billstartdt[2] & pred2015df$dates < billsdf$billstartdt[3];
idx = which(pred2015df$dates >= billsdf$billstartdt[2] & pred2015df$dates < billsdf$billstartdt[3])
idx = which(pred2015df$dates >= as.POSIXct.date(billsdf$billstartdt[2]) & pred2015df$dates < as.POSIXct(billsdf$billstartdt[3]))
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[2]) & pred2015df$dates < as.POSIXct(billsdf$billstartdt[3]))
length(idx)
idx = which(pred2015df$dates < as.POSIXct(billsdf$billstartdt[i]));
idx = which(pred2015df$dates < as.POSIXct(billsdf$billstartdt[1]));
idx = which(pred2015df$dates < as.POSIXct(billsdf$billstartdt[2]));
idx
length(idx)
idx = which(pred2015df$dates < as.POSIXct(billsdf$billstartdt[2]));
resultsdf$predkwh[1] = sum(pred2015df$kwh[idx])
for (i in 2:11)
{
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[i]) &
pred2015df$dates < as.POSIXct(billsdf$billstartdt[i+1]))
resultsdf$predkwh[i] = sum(pred2015df$kwh[idx])
}
for (i in 2:11)
{}
i
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[12]));
resultsdf$predkwh[12] = sum(pred2015df$kwh[idx])
resultsdf
idx = which(eloadhrdf$dates < as.POSIXct(billsdf$billstartdt[2]))
length(idx)
idx = which(eloadhrdf$dates < as.POSIXct("2014-02-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT")))
idx = which(eloadhrdf$dates < as.POSIXct("2014-02-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"))
idx = which(modeldatadf$dates < as.POSIXct("2014-02-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT")))
idx = which(modeldatadf$dates < as.POSIXct("2014-02-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"))
idx
sum(modeldatadf$kwh[idx])
sum(predict(gbm.fit, modeldatadf[idx, ], type = "response", n.trees = best.iter_train)
)
sum(predict(gbm.fit, modeldatadf[idx, ], type = "response", n.trees = best.iter_train))
idx = which(modeldatadf$dates >= as.POSIXct("2014-02-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT" & modeldatadf$dates < as.POSIXct("2014-03-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT")))
idx = which(modeldatadf$dates >= as.POSIXct("2014-02-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT") & modeldatadf$dates < as.POSIXct("2014-03-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"))
sum(modeldatadf$kwh[idx])
sum(predict(gbm.fit, modeldatadf[idx, ], type = "response", n.trees = best.iter_train)
)
idx = which(modeldatadf$dates >= as.POSIXct("2014-03-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT") & modeldatadf$dates < as.POSIXct("2014-04-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"))
sum(modeldatadf$kwh[idx])
sum(predict(gbm.fit, modeldatadf[idx, ], type = "response", n.trees = best.iter_train))
idx = which(modeldatadf$dates >= as.POSIXct("2014-04-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT") & modeldatadf$dates < as.POSIXct("2014-05-01 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"))
sum(modeldatadf$kwh[idx])
sum(predict(gbm.fit, modeldatadf[idx, ], type = "response", n.trees = best.iter_train))
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.005, interaction.dept = 1, var.monotone = c(0, 0, 1), n.trees = 5000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.01, interaction.dept = 1, var.monotone = c(0, 0, 1), n.trees = 5000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.05, interaction.dept = 1, var.monotone = c(0, 0, 1), n.trees = 5000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
summary(gbm.fit)
gbm.fit$cv.error[best.iter_train]
gbm.fit$train.error[best.iter_train]
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "month", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "temp", n.trees = best.iter_train)
idx = which(modeldatadf$dates >= as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
pred2015df = modeldatadf[idx, ];
predkwh = predict(gbm.fit, pred2015df, type = "response", n.trees = best.iter_train);
resultsdf = data.frame(dates = billsdf$billdate, predkwh = integer(12), actualkwh = billsdf$kwh);
idx = which(pred2015df$dates < as.POSIXct(billsdf$billstartdt[2]));
resultsdf$predkwh[1] = sum(pred2015df$kwh[idx])
for (i in 2:11)
{
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[i]) &
pred2015df$dates < as.POSIXct(billsdf$billstartdt[i+1]))
resultsdf$predkwh[i] = sum(pred2015df$kwh[idx])
}
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[12]));
resultsdf$predkwh[12] = sum(pred2015df$kwh[idx])
resultsdf
length(which(is.na(pred2015df$temp)))
which(is.na(pred2015df$temp))
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.05, interaction.dept = 2, var.monotone = c(0, 0, 1), n.trees = 5000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.01, interaction.dept = 2, var.monotone = c(0, 0, 1), n.trees = 2000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
gbm.fit = gbm(kwh ~ month + hrofday + temp, data = train, distribution = "gaussian", shrinkage = 0.01, interaction.dept = 2, var.monotone = c(0, 0, 1), n.trees = 3000, cv.folds = 10, verbose = T)
best.iter_train = gbm.perf(gbm.fit, method = "cv")
summary(gbm.fit)
gbm.fit$cv.error[best.iter_train]
gbm.fit$train.error[best.iter_train]
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "hrofday", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "month", n.trees = best.iter_train)
plot(x = gbm.fit, i.var = "temp", n.trees = best.iter_train)
idx = which(modeldatadf$dates >= as.POSIXct("2014-12-20 0:00:00 GMT", "%Y-%m-%d %H:%M:%S", tz = "GMT"));
pred2015df = modeldatadf[idx, ];
predkwh = predict(gbm.fit, pred2015df, type = "response", n.trees = best.iter_train);
resultsdf = data.frame(dates = billsdf$billdate, predkwh = integer(12), actualkwh = billsdf$kwh);
idx = which(pred2015df$dates < as.POSIXct(billsdf$billstartdt[2]));
resultsdf$predkwh[1] = sum(pred2015df$kwh[idx])
for (i in 2:11)
{
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[i]) &
pred2015df$dates < as.POSIXct(billsdf$billstartdt[i+1]))
resultsdf$predkwh[i] = sum(pred2015df$kwh[idx])
}
idx = which(pred2015df$dates >= as.POSIXct(billsdf$billstartdt[12]));
resultsdf$predkwh[12] = sum(pred2015df$kwh[idx])
resultsdf
